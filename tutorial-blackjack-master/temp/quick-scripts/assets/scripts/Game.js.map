{"version":3,"sources":["Game.js"],"names":["players","require","Decks","Types","ActorPlayingState","Fsm","Game","cc","Class","extends","Component","properties","playerAnchors","default","type","Node","playerPrefab","Prefab","dealer","inGameUI","betUI","assetMng","audioMng","turnDuration","betDuration","totalChipsNum","totalDiamondNum","numberOfDecks","statics","instance","onLoad","getComponent","init","player","createPlayers","info","resultTxt","totalChips","labelTotalChips","decks","fsm","updateTotalChips","playMusic","addStake","delta","console","log","enabled","string","playChips","resetStake","stakeNum","renderer","updateTotalStake","i","playerNode","instantiate","anchor","switchSide","addChild","position","p","playerInfoPos","find","getPosition","stakePos","actorRenderer","hit","addCard","draw","state","Bust","onPlayerActed","playCard","playButton","stand","deal","toDeal","start","toBet","report","quitToMenu","director","loadScene","onEnterDealState","resetTossedChips","resetCountdown","showStakeChips","holdCard","addHoleCard","onDealed","onPlayersTurnState","enter","showGameState","onEnterDealersTurnState","Normal","wantHit","onDealerActed","onEndState","revealHoldCard","showResultState","outcome","_getPlayerResult","Outcome","Win","pauseMusic","playWin","winChipsNum","Report","hand","Hand","BlackJack","Lose","playLose","Tie","onBetState","reset","showBetState","startCountdown","resumeMusic","bestPoint"],"mappings":"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","file":"Game.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["var players = require('PlayerData').players;\nvar Decks = require('Decks');\nvar Types = require('Types');\nvar ActorPlayingState = Types.ActorPlayingState;\nvar Fsm = require('game-fsm');\n\nvar Game = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        playerAnchors: {\n            default: [],\n            type: cc.Node\n        },\n        playerPrefab: cc.Prefab,\n        dealer: cc.Node,\n        inGameUI: cc.Node,\n        betUI: cc.Node,\n        assetMng: cc.Node,\n        audioMng: cc.Node,\n        turnDuration: 0,\n        betDuration: 0,\n        totalChipsNum: 0,\n        totalDiamondNum: 0,\n        numberOfDecks: {\n            default: 1,\n            type: 'Integer'\n        }\n    },\n\n    statics: {\n        instance: null\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        Game.instance = this;\n        this.inGameUI = this.inGameUI.getComponent('InGameUI');\n        this.assetMng = this.assetMng.getComponent('AssetMng');\n        this.audioMng = this.audioMng.getComponent('AudioMng');\n        this.betUI = this.betUI.getComponent('Bet');\n        this.inGameUI.init(this.betDuration);\n        this.betUI.init();\n        this.dealer = this.dealer.getComponent('Dealer');\n        this.dealer.init();\n\n        //\n        this.player = null;\n        this.createPlayers();\n\n        // shortcut to ui element\n        this.info = this.inGameUI.resultTxt;\n        this.totalChips = this.inGameUI.labelTotalChips;\n\n        // init logic\n        this.decks = new Decks(this.numberOfDecks);\n        this.fsm = Fsm;\n        this.fsm.init(this);\n\n        // start\n        this.updateTotalChips();\n\n        this.audioMng.playMusic();\n    },\n\n    addStake: function (delta) {\n        if (this.totalChipsNum < delta) {\n            console.log('not enough chips!');\n            this.info.enabled = true;\n            this.info.string = '金币不足!';\n            return false;\n        } else {\n            this.totalChipsNum -= delta;\n            this.updateTotalChips();\n            this.player.addStake(delta);\n            this.audioMng.playChips();\n            this.info.enabled = false;\n            this.info.string = '请下注';\n            return true;\n        }\n\n    },\n\n    resetStake: function() {\n        this.totalChipsNum += this.player.stakeNum;\n        this.player.resetStake();\n        this.updateTotalChips();\n    },\n\n    updateTotalChips: function() {\n        this.totalChips.string = this.totalChipsNum;\n        this.player.renderer.updateTotalStake(this.totalChipsNum);\n    },\n\n    createPlayers: function () {\n        for (var i = 0; i < 5; ++i) {\n            var playerNode = cc.instantiate(this.playerPrefab);\n            var anchor = this.playerAnchors[i];\n            var switchSide = (i > 2);\n            anchor.addChild(playerNode);\n            playerNode.position = cc.p(0, 0);\n\n            var playerInfoPos = cc.find('anchorPlayerInfo', anchor).getPosition();\n            var stakePos = cc.find('anchorStake', anchor).getPosition();\n            var actorRenderer = playerNode.getComponent('ActorRenderer');\n            actorRenderer.init(players[i], playerInfoPos, stakePos, this.turnDuration, switchSide);\n            if (i === 2) {\n                this.player = playerNode.getComponent('Player');\n                this.player.init();\n            }\n        }\n    },\n\n    // UI EVENT CALLBACKS\n\n    // 玩家要牌\n    hit: function () {\n        this.player.addCard(this.decks.draw());\n        if (this.player.state === ActorPlayingState.Bust) {\n            // if every player end\n            this.fsm.onPlayerActed();\n        }\n\n        this.audioMng.playCard();\n\n        //if (this.dealer.state === ActorPlayingState.Normal) {\n        //    if (this.dealer.wantHit()) {\n        //        this.dealer.addCard(this.decks.draw());\n        //    }\n        //    else {\n        //        this.dealer.stand();\n        //    }\n        //}\n        //\n        //if (this.dealer.state === ActorPlayingState.Bust) {\n        //    this.state = GamingState.End;\n        //}\n        this.audioMng.playButton();\n    },\n\n    // 玩家停牌\n    stand: function () {\n        this.player.stand();\n\n        this.audioMng.playButton();\n\n        // if every player end\n        this.fsm.onPlayerActed();\n    },\n\n    //\n    deal: function () {\n        this.fsm.toDeal();\n        this.audioMng.playButton();\n    },\n\n    //\n    start: function () {\n        this.fsm.toBet();\n        this.audioMng.playButton();\n    },\n\n    // 玩家报到\n    report: function () {\n        this.player.report();\n\n        // if every player end\n        this.fsm.onPlayerActed();\n    },\n\n    quitToMenu: function () {\n        cc.director.loadScene('menu');\n    },\n\n    // FSM CALLBACKS\n\n    onEnterDealState: function () {\n        this.betUI.resetTossedChips();\n        this.inGameUI.resetCountdown();\n        this.player.renderer.showStakeChips(this.player.stakeNum);\n        this.player.addCard(this.decks.draw());\n        var holdCard = this.decks.draw();\n        this.dealer.addHoleCard(holdCard);\n        this.player.addCard(this.decks.draw());\n        this.dealer.addCard(this.decks.draw());\n        this.audioMng.playCard();\n        this.fsm.onDealed();\n    },\n\n    onPlayersTurnState: function (enter) {\n        if (enter) {\n            this.inGameUI.showGameState();\n        }\n    },\n\n    onEnterDealersTurnState: function () {\n        while (this.dealer.state === ActorPlayingState.Normal) {\n            if (this.dealer.wantHit()) {\n                this.dealer.addCard(this.decks.draw());\n            }\n            else {\n                this.dealer.stand();\n            }\n        }\n        this.fsm.onDealerActed();\n    },\n\n    // 结算\n    onEndState: function (enter) {\n        if (enter) {\n            this.dealer.revealHoldCard();\n            this.inGameUI.showResultState();\n\n            var outcome = this._getPlayerResult(this.player, this.dealer);\n            switch (outcome) {\n                case Types.Outcome.Win:\n                    this.info.string = 'You Win';\n                    this.audioMng.pauseMusic();\n                    this.audioMng.playWin();\n                    // 拿回原先自己的筹码\n                    this.totalChipsNum += this.player.stakeNum;\n                    // 奖励筹码\n                    var winChipsNum = this.player.stakeNum;\n                    if (!this.player.state === Types.ActorPlayingState.Report) {\n                        if (this.player.hand === Types.Hand.BlackJack) {\n                            winChipsNum *= 1.5;\n                        }\n                        else {\n                            // 五小龙\n                            winChipsNum *= 2.0;\n                        }\n                    }\n                    this.totalChipsNum += winChipsNum;\n                    this.updateTotalChips();\n                    break;\n\n                case Types.Outcome.Lose:\n                    this.info.string = 'You Lose';\n                    this.audioMng.pauseMusic();\n                    this.audioMng.playLose();\n                    break;\n\n                case Types.Outcome.Tie:\n                    this.info.string = 'Draw';\n                    // 退还筹码\n                    this.totalChipsNum += this.player.stakeNum;\n                    this.updateTotalChips();\n                    break;\n            }\n        }\n\n        this.info.enabled = enter;\n    },\n\n    // 下注\n    onBetState: function  (enter) {\n        if (enter) {\n           this.decks.reset();\n           this.player.reset();\n           this.dealer.reset();\n           this.info.string = '请下注';\n           this.inGameUI.showBetState();\n           this.inGameUI.startCountdown();\n\n           this.audioMng.resumeMusic();\n        }\n        this.info.enabled = enter;\n    },\n\n    // PRIVATES\n\n    // 判断玩家输赢\n    _getPlayerResult: function (player, dealer) {\n        var Outcome = Types.Outcome;\n        if (player.state === ActorPlayingState.Bust) {\n            return Outcome.Lose;\n        }\n        else if (dealer.state === ActorPlayingState.Bust) {\n            return Outcome.Win;\n        }\n        else {\n            if (player.state === ActorPlayingState.Report) {\n                return Outcome.Win;\n            }\n            else {\n                if (player.hand > dealer.hand) {\n                    return Outcome.Win;\n                }\n                else if (player.hand < dealer.hand) {\n                    return Outcome.Lose;\n                }\n                else {\n                    if (player.bestPoint === dealer.bestPoint) {\n                        return Outcome.Tie;\n                    }\n                    else if (player.bestPoint < dealer.bestPoint) {\n                        return Outcome.Lose;\n                    }\n                    else {\n                        return Outcome.Win;\n                    }\n                }\n            }\n        }\n    },\n\n});\n"]}