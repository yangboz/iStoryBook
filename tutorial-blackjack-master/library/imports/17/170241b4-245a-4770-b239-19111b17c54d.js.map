{"version":3,"sources":["../../../../../assets/scripts/module/assets/scripts/module/Decks.js"],"names":["Types","require","Decks","numberOfDecks","_numberOfDecks","_cardIds","Array","reset","prototype","length","index","fromId","Card","i","cardId","draw","cardIds","len","random","Math","result","last","module","exports"],"mappings":";;;;;;AAAA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;;AAEA;;;;;;AAMA,SAASC,KAAT,CAAgBC,aAAhB,EAA+B;AAC3B;AACA,SAAKC,cAAL,GAAsBD,aAAtB;AACA;AACA,SAAKE,QAAL,GAAgB,IAAIC,KAAJ,CAAUH,gBAAgB,EAA1B,CAAhB;;AAEA,SAAKI,KAAL;AACH;;AAED;;;;AAIAL,MAAMM,SAAN,CAAgBD,KAAhB,GAAwB,YAAY;AAChC,SAAKF,QAAL,CAAcI,MAAd,GAAuB,KAAKL,cAAL,GAAsB,EAA7C;AACA,QAAIM,QAAQ,CAAZ;AACA,QAAIC,SAASX,MAAMY,IAAN,CAAWD,MAAxB;AACA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAKT,cAAzB,EAAyC,EAAES,CAA3C,EAA8C;AAC1C,aAAK,IAAIC,SAAS,CAAlB,EAAqBA,SAAS,EAA9B,EAAkC,EAAEA,MAApC,EAA4C;AACxC,iBAAKT,QAAL,CAAcK,KAAd,IAAuBC,OAAOG,MAAP,CAAvB;AACA,cAAEJ,KAAF;AACH;AACJ;AACJ,CAVD;;AAYA;;;;;AAKAR,MAAMM,SAAN,CAAgBO,IAAhB,GAAuB,YAAY;AAC/B,QAAIC,UAAU,KAAKX,QAAnB;AACA,QAAIY,MAAMD,QAAQP,MAAlB;AACA,QAAIQ,QAAQ,CAAZ,EAAe;AACX,eAAO,IAAP;AACH;;AAED,QAAIC,SAASC,KAAKD,MAAL,EAAb;AACA,QAAIR,QAASQ,SAASD,GAAV,GAAiB,CAA7B;AACA,QAAIG,SAASJ,QAAQN,KAAR,CAAb;;AAEA;AACA,QAAIW,OAAOL,QAAQC,MAAM,CAAd,CAAX;AACAD,YAAQN,KAAR,IAAiBW,IAAjB;AACAL,YAAQP,MAAR,GAAiBQ,MAAM,CAAvB;;AAEA,WAAOG,MAAP;AACH,CAjBD;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,OAAOC,OAAP,GAAiBrB,KAAjB","file":"Decks.js","sourceRoot":"../../../../../assets/scripts/module","sourcesContent":["var Types = require('Types');\n\n/**\n * 扑克管理类，用来管理一副或多副牌\n * @class Decks\n * @constructor\n * @param {number} numberOfDecks - 总共几副牌\n */\nfunction Decks (numberOfDecks) {\n    // 总共几副牌\n    this._numberOfDecks = numberOfDecks;\n    // 还没发出去的牌\n    this._cardIds = new Array(numberOfDecks * 52);\n\n    this.reset();\n}\n\n/**\n * 重置所有牌\n * @method reset\n */\nDecks.prototype.reset = function () {\n    this._cardIds.length = this._numberOfDecks * 52;\n    var index = 0;\n    var fromId = Types.Card.fromId;\n    for (var i = 0; i < this._numberOfDecks; ++i) {\n        for (var cardId = 0; cardId < 52; ++cardId) {\n            this._cardIds[index] = fromId(cardId);\n            ++index;\n        }\n    }\n};\n\n/**\n * 随机抽一张牌，如果已经没牌了，将返回 null\n * @method draw\n * @return {Card}\n */\nDecks.prototype.draw = function () {\n    var cardIds = this._cardIds;\n    var len = cardIds.length;\n    if (len === 0) {\n        return null;\n    }\n\n    var random = Math.random();\n    var index = (random * len) | 0;\n    var result = cardIds[index];\n\n    // 保持数组紧凑\n    var last = cardIds[len - 1];\n    cardIds[index] = last;\n    cardIds.length = len - 1;\n\n    return result;\n};\n\n///**\n// * 发一张牌\n// * @method deal\n// * @return {Card}\n// */\n//Decks.prototype.deal = function () {\n//    this._cardIds.pop();\n//};\n\n///**\n// * 洗牌\n// * @method shuffle\n// */\n//Decks.prototype.shuffle = function () {\n//    shuffleArray(this._cardIds);\n//};\n//\n///**\n// * Randomize array element order in-place.\n// * Using Durstenfeld shuffle algorithm.\n// * http://stackoverflow.com/a/12646864\n// */\n//function shuffleArray(array) {\n//    for (var i = array.length - 1; i > 0; i--) {\n//        var j = (Math.random() * (i + 1)) | 0;\n//        var temp = array[i];\n//        array[i] = array[j];\n//        array[j] = temp;\n//    }\n//    return array;\n//}\n\nmodule.exports = Decks;\n"]}