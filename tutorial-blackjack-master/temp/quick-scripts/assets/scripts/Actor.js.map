{"version":3,"sources":["Actor.js"],"names":["Types","require","Utils","ActorPlayingState","cc","Class","extends","Component","properties","cards","default","serializable","visible","holeCard","bestPoint","get","minMax","getMinMaxPoint","max","hand","count","length","Hand","FiveCard","BlackJack","Normal","canReport","renderer","type","Node","state","notify","oldState","updateState","init","ready","getComponent","addCard","card","push","onDeal","concat","isBust","Bust","addHoleCard","stand","Stand","revealHoldCard","unshift","onRevealHoldCard","report","Report","reset","reported","onReset"],"mappings":"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","file":"Actor.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["var Types = require('Types');\nvar Utils = require('Utils');\nvar ActorPlayingState = Types.ActorPlayingState;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 所有明牌\n        cards: {\n            default: [],\n            serializable: false,\n            visible: false\n        },\n        // 暗牌，demo 暂存\n        holeCard: {\n            default: null,\n            serializable: false,\n            visible: false\n        },\n\n        // 手上最接近 21 点的点数（有可能超过 21 点）\n        bestPoint: {\n            get: function () {\n                var minMax = Utils.getMinMaxPoint(this.cards);\n                return minMax.max;\n            }\n        },\n\n        // 牌型，不考虑是否爆牌\n        hand: {\n            get: function () {\n                var count = this.cards.length;\n                if (this.holeCard) {\n                    ++count;\n                }\n                if (count >= 5) {\n                    return Types.Hand.FiveCard;\n                }\n                if (count === 2 && this.bestPoint === 21) {\n                    return Types.Hand.BlackJack;\n                }\n                return Types.Hand.Normal;\n            }\n        },\n\n        canReport: {\n            get: function () {\n                return this.hand !== Types.Hand.Normal;\n            },\n            visible: false\n        },\n\n        renderer: {\n            default: null,\n            type: cc.Node\n        },\n        state: {\n            default: ActorPlayingState.Normal,\n            notify: function (oldState) {\n                if (this.state !== oldState) {\n                    this.renderer.updateState();\n                }\n            },\n            type: ActorPlayingState,\n            serializable: false,\n        }\n    },\n\n    init: function () {\n        this.ready = true;\n        this.renderer = this.getComponent('ActorRenderer');\n    },\n\n    addCard: function (card) {\n        this.cards.push(card);\n        this.renderer.onDeal(card, true);\n\n        var cards = this.holeCard ? [this.holeCard].concat(this.cards) : this.cards;\n        if (Utils.isBust(cards)) {\n            this.state = ActorPlayingState.Bust;\n        }\n    },\n\n    addHoleCard: function (card) {\n        this.holeCard = card;\n        this.renderer.onDeal(card, false);\n    },\n\n    stand: function () {\n        this.state = ActorPlayingState.Stand;\n    },\n\n    revealHoldCard: function () {\n        if (this.holeCard) {\n            this.cards.unshift(this.holeCard);\n            this.holeCard = null;\n            this.renderer.onRevealHoldCard();\n        }\n    },\n\n    // revealNormalCard: function() {\n    //     this.onRevealNormalCard();\n    // },\n\n    report: function () {\n        this.state = ActorPlayingState.Report;\n    },\n\n    reset: function () {\n        this.cards = [];\n        this.holeCard = null;\n        this.reported = false;\n        this.state = ActorPlayingState.Normal;\n        this.renderer.onReset();\n    }\n});\n"]}