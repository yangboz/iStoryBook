{"version":3,"sources":["state.com.js"],"names":["StateJS","Behavior","behavior","actions","push","prototype","Array","apply","arguments","hasActions","length","invoke","message","instance","history","forEach","action","PseudoStateKind","TransitionKind","Element","name","parent","qualifiedName","namespaceSeparator","toString","__extends","d","b","p","hasOwnProperty","__","constructor","Region","_super","state","call","vertices","regions","getRoot","clean","accept","visitor","arg1","arg2","arg3","visitRegion","defaultName","Vertex","State","defaultRegion","outgoing","region","to","target","kind","External","Transition","PseudoState","Initial","isHistory","DeepHistory","ShallowHistory","isInitial","visitPseudoState","exitBehavior","entryBehavior","reduce","result","undefined","isFinal","isSimple","isComposite","isOrthogonal","exit","exitAction","entry","entryAction","visitState","FinalState","visitFinalState","StateMachine","visitStateMachine","source","_this","transitionBehavior","onTraverse","Internal","guard","TrueGuard","else","FalseGuard","when","effect","transitionAction","visitTransition","Visitor","visitElement","element","vertex","visitVertex","transition","pseudoState","finalState","stateMachine","StateMachineInstance","last","isTerminated","setCurrent","getCurrent","setRandom","generator","random","getRandom","max","Math","floor","isActive","stateMachineInstance","isComplete","every","initialise","stateMachineModel","autoInitialiseModel","console","log","onInitialise","InitialiseElements","evaluate","evaluateState","transitions","filter","traverse","error","Junction","selectTransition","Choice","results","findElse","leave","elementBehavior","beginEnter","endEnter","enter","ancestors","concat","InitialiseTransitions","behaviour","Local","visitLocalTransition","visitExternalTransition","targetAncestors","i","cascadeElementEntry","sourceAncestors","min","next","task","behaviours","deepHistoryAbove","defaultConsole","regionInitial","Terminate","optionalParams","_i","warn","validate","Validator","initial","indexOf","module","exports"],"mappings":"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","file":"state.com.js","sourceRoot":"../../../../../assets/scripts/lib","sourcesContent":["/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * Behavior encapsulates multiple Action callbacks that can be invoked by a single call.\n     * @class Behavior\n     */\n    var Behavior = (function () {\n        /**\n         * Creates a new instance of the Behavior class.\n         * @param {Behavior} behavior The copy constructor; omit this optional parameter for a simple constructor.\n         */\n        function Behavior(behavior) {\n            this.actions = [];\n            if (behavior) {\n                this.push(behavior); // NOTE: this ensures a copy of the array is made\n            }\n        }\n        /**\n         * Adds an Action or set of Actions callbacks in a Behavior instance to this behavior instance.\n         * @method push\n         * @param {Behavior} behavior The Action or set of Actions callbacks to add to this behavior instance.\n         * @returns {Behavior} Returns this behavior instance (for use in fluent style development).\n         */\n        Behavior.prototype.push = function (behavior) {\n            Array.prototype.push.apply(this.actions, behavior instanceof Behavior ? behavior.actions : arguments);\n            return this;\n        };\n        /**\n         * Tests the Behavior instance to see if any actions have been defined.\n         * @method hasActions\n         * @returns {boolean} True if there are actions defined within this Behavior instance.\n         */\n        Behavior.prototype.hasActions = function () {\n            return this.actions.length !== 0;\n        };\n        /**\n         * Invokes all the action callbacks in this Behavior instance.\n         * @method invoke\n         * @param {any} message The message that triggered the transition.\n         * @param {IActiveStateConfiguration} instance The state machine instance.\n         * @param {boolean} history Internal use only\n         */\n        Behavior.prototype.invoke = function (message, instance, history) {\n            if (history === void 0) { history = false; }\n            this.actions.forEach(function (action) { return action(message, instance, history); });\n        };\n        return Behavior;\n    })();\n    StateJS.Behavior = Behavior;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * An enumeration of static constants that dictates the precise behaviour of pseudo states.\n     *\n     * Use these constants as the `kind` parameter when creating new `PseudoState` instances.\n     * @class PseudoStateKind\n     */\n    (function (PseudoStateKind) {\n        /**\n         * Used for pseudo states that are always the staring point when entering their parent region.\n         * @member {PseudoStateKind} Initial\n         */\n        PseudoStateKind[PseudoStateKind[\"Initial\"] = 0] = \"Initial\";\n        /**\n         * Used for pseudo states that are the the starting point when entering their parent region for the first time; subsequent entries will start at the last known state.\n         * @member {PseudoStateKind} ShallowHistory\n         */\n        PseudoStateKind[PseudoStateKind[\"ShallowHistory\"] = 1] = \"ShallowHistory\";\n        /**\n         * As per `ShallowHistory` but the history semantic cascades through all child regions irrespective of their initial pseudo state kind.\n         * @member {PseudoStateKind} DeepHistory\n         */\n        PseudoStateKind[PseudoStateKind[\"DeepHistory\"] = 2] = \"DeepHistory\";\n        /**\n         * Enables a dynamic conditional branches; within a compound transition.\n         * All outbound transition guards from a Choice are evaluated upon entering the PseudoState:\n         * if a single transition is found, it will be traversed;\n         * if many transitions are found, an arbitary one will be selected and traversed;\n         * if none evaluate true, and there is no 'else transition' defined, the machine is deemed illformed and an exception will be thrown.\n         * @member {PseudoStateKind} Choice\n         */\n        PseudoStateKind[PseudoStateKind[\"Choice\"] = 3] = \"Choice\";\n        /**\n         * Enables a static conditional branches; within a compound transition.\n         * All outbound transition guards from a Choice are evaluated upon entering the PseudoState:\n         * if a single transition is found, it will be traversed;\n         * if many or none evaluate true, and there is no 'else transition' defined, the machine is deemed illformed and an exception will be thrown.\n         * @member {PseudoStateKind} Junction\n         */\n        PseudoStateKind[PseudoStateKind[\"Junction\"] = 4] = \"Junction\";\n        /**\n         * Entering a terminate `PseudoState` implies that the execution of this state machine by means of its state object is terminated.\n         * @member {PseudoStateKind} Terminate\n         */\n        PseudoStateKind[PseudoStateKind[\"Terminate\"] = 5] = \"Terminate\";\n    })(StateJS.PseudoStateKind || (StateJS.PseudoStateKind = {}));\n    var PseudoStateKind = StateJS.PseudoStateKind;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * An enumeration of static constants that dictates the precise behaviour of transitions.\n     *\n     * Use these constants as the `kind` parameter when creating new `Transition` instances.\n     * @class TransitionKind\n     */\n    (function (TransitionKind) {\n        /**\n         * The transition, if triggered, occurs without exiting or entering the source state.\n         * Thus, it does not cause a state change. This means that the entry or exit condition of the source state will not be invoked.\n         * An internal transition can be taken even if the state machine is in one or more regions nested within this state.\n         * @member {TransitionKind} Internal\n         */\n        TransitionKind[TransitionKind[\"Internal\"] = 0] = \"Internal\";\n        /**\n         * The transition, if triggered, will not exit the composite (source) state, but will enter the non-active target vertex ancestry.\n         * @member {TransitionKind} Local\n         */\n        TransitionKind[TransitionKind[\"Local\"] = 1] = \"Local\";\n        /**\n         * The transition, if triggered, will exit the source vertex.\n         * @member {TransitionKind} External\n         */\n        TransitionKind[TransitionKind[\"External\"] = 2] = \"External\";\n    })(StateJS.TransitionKind || (StateJS.TransitionKind = {}));\n    var TransitionKind = StateJS.TransitionKind;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * An abstract class used as the base for the Region and Vertex classes.\n     * An element is a node within the tree structure that represents a composite state machine model.\n     * @class Element\n     */\n    var Element = (function () {\n        /**\n         * Creates a new instance of the element class.\n         * @param {string} name The name of the element.\n         */\n        function Element(name, parent) {\n            this.name = name;\n            this.qualifiedName = parent ? (parent.qualifiedName + Element.namespaceSeparator + name) : name;\n        }\n        /**\n         * Returns a the element name as a fully qualified namespace.\n         * @method toString\n         * @returns {string}\n         */\n        Element.prototype.toString = function () {\n            return this.qualifiedName;\n        };\n        /**\n         * The symbol used to separate element names within a fully qualified name.\n         * Change this static member to create different styles of qualified name generated by the toString method.\n         * @member {string}\n         */\n        Element.namespaceSeparator = \".\";\n        return Element;\n    })();\n    StateJS.Element = Element;\n})(StateJS || (StateJS = {}));\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * An element within a state machine model that is a container of Vertices.\n     *\n     * Regions are implicitly inserted into composite state machines as a container for vertices.\n     * They only need to be explicitly defined if orthogonal states are required.\n     *\n     * Region extends the Element class and inherits its public interface.\n     * @class Region\n     * @augments Element\n     */\n    var Region = (function (_super) {\n        __extends(Region, _super);\n        /**\n         * Creates a new instance of the Region class.\n         * @param {string} name The name of the region.\n         * @param {State} state The parent state that this region will be a child of.\n         */\n        function Region(name, state) {\n            _super.call(this, name, state);\n            /**\n             * The set of vertices that are children of the region.\n             * @member {Array<Vertex>}\n             */\n            this.vertices = [];\n            this.state = state;\n            this.state.regions.push(this);\n            this.state.getRoot().clean = false;\n        }\n        /**\n         * Returns the root element within the state machine model.\n         * @method getRoot\n         * @returns {StateMachine} The root state machine element.\n         */\n        Region.prototype.getRoot = function () {\n            return this.state.getRoot();\n        };\n        /**\n         * Accepts an instance of a visitor and calls the visitRegion method on it.\n         * @method accept\n         * @param {Visitor<TArg1>} visitor The visitor instance.\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\n         * @param {any} arg2 An optional argument to pass into the visitor.\n         * @param {any} arg3 An optional argument to pass into the visitor.\n         * @returns {any} Any value can be returned by the visitor.\n         */\n        Region.prototype.accept = function (visitor, arg1, arg2, arg3) {\n            return visitor.visitRegion(this, arg1, arg2, arg3);\n        };\n        /**\n         * The name given to regions that are are created automatically when a state is passed as a vertex's parent.\n         * Regions are automatically inserted into state machine models as the composite structure is built; they are named using this static member.\n         * Update this static member to use a different name for default regions.\n         * @member {string}\n         */\n        Region.defaultName = \"default\";\n        return Region;\n    })(StateJS.Element);\n    StateJS.Region = Region;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * An abstract element within a state machine model that can be the source or target of a transition (states and pseudo states).\n     *\n     * Vertex extends the Element class and inherits its public interface.\n     * @class Vertex\n     * @augments Element\n     */\n    var Vertex = (function (_super) {\n        __extends(Vertex, _super);\n        /**\n         * Creates a new instance of the Vertex class.\n         * @param {string} name The name of the vertex.\n         * @param {Element} parent The parent region or state.\n         */\n        function Vertex(name, parent) {\n            _super.call(this, name, parent = (parent instanceof StateJS.State ? parent.defaultRegion() : parent)); // TODO: find a cleaner way to manage implicit conversion\n            /**\n             * The set of transitions from this vertex.\n             * @member {Array<Transition>}\n             */\n            this.outgoing = [];\n            this.region = parent; // NOTE: parent will be a Region due to the conditional logic in the super call above\n            if (this.region) {\n                this.region.vertices.push(this);\n                this.region.getRoot().clean = false;\n            }\n        }\n        /**\n         * Returns the root element within the state machine model.\n         * @method getRoot\n         * @returns {StateMachine} The root state machine element.\n         */\n        Vertex.prototype.getRoot = function () {\n            return this.region.getRoot(); // NOTE: need to keep this dynamic as a state machine may be embedded within another\n        };\n        /**\n         * Creates a new transition from this vertex.\n         * Newly created transitions are completion transitions; they will be evaluated after a vertex has been entered if it is deemed to be complete.\n         * Transitions can be converted to be event triggered by adding a guard condition via the transitions `where` method.\n         * @method to\n         * @param {Vertex} target The destination of the transition; omit for internal transitions.\n         * @param {TransitionKind} kind The kind the transition; use this to set Local or External (the default if omitted) transition semantics.\n         * @returns {Transition} The new transition object.\n         */\n        Vertex.prototype.to = function (target, kind) {\n            if (kind === void 0) { kind = StateJS.TransitionKind.External; }\n            return new StateJS.Transition(this, target, kind);\n        };\n        /**\n         * Accepts an instance of a visitor.\n         * @method accept\n         * @param {Visitor<TArg>} visitor The visitor instance.\n         * @param {TArg} arg An optional argument to pass into the visitor.\n         * @returns {any} Any value can be returned by the visitor.\n         */\n        Vertex.prototype.accept = function (visitor, arg1, arg2, arg3) { };\n        return Vertex;\n    })(StateJS.Element);\n    StateJS.Vertex = Vertex;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * An element within a state machine model that represents an transitory Vertex within the state machine model.\n     *\n     * Pseudo states are required in all state machine models; at the very least, an `Initial` pseudo state is the default stating state when the parent region is entered.\n     * Other types of pseudo state are available; typically for defining history semantics or to facilitate more complex transitions.\n     * A `Terminate` pseudo state kind is also available to immediately terminate processing within the entire state machine instance.\n     *\n     * PseudoState extends the Vertex class and inherits its public interface.\n     * @class PseudoState\n     * @augments Vertex\n     */\n    var PseudoState = (function (_super) {\n        __extends(PseudoState, _super);\n        /**\n         * Creates a new instance of the PseudoState class.\n         * @param {string} name The name of the pseudo state.\n         * @param {Element} parent The parent element that this pseudo state will be a child of.\n         * @param {PseudoStateKind} kind Determines the behaviour of the PseudoState.\n         */\n        function PseudoState(name, parent, kind) {\n            if (kind === void 0) { kind = StateJS.PseudoStateKind.Initial; }\n            _super.call(this, name, parent);\n            this.kind = kind;\n        }\n        /**\n         * Tests a pseudo state to determine if it is a history pseudo state.\n         * History pseudo states are of kind: Initial, ShallowHisory, or DeepHistory.\n         * @method isHistory\n         * @returns {boolean} True if the pseudo state is a history pseudo state.\n         */\n        PseudoState.prototype.isHistory = function () {\n            return this.kind === StateJS.PseudoStateKind.DeepHistory || this.kind === StateJS.PseudoStateKind.ShallowHistory;\n        };\n        /**\n         * Tests a pseudo state to determine if it is an initial pseudo state.\n         * Initial pseudo states are of kind: Initial, ShallowHisory, or DeepHistory.\n         * @method isInitial\n         * @returns {boolean} True if the pseudo state is an initial pseudo state.\n         */\n        PseudoState.prototype.isInitial = function () {\n            return this.kind === StateJS.PseudoStateKind.Initial || this.isHistory();\n        };\n        /**\n         * Accepts an instance of a visitor and calls the visitPseudoState method on it.\n         * @method accept\n         * @param {Visitor<TArg1>} visitor The visitor instance.\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\n         * @param {any} arg2 An optional argument to pass into the visitor.\n         * @param {any} arg3 An optional argument to pass into the visitor.\n         * @returns {any} Any value can be returned by the visitor.\n         */\n        PseudoState.prototype.accept = function (visitor, arg1, arg2, arg3) {\n            return visitor.visitPseudoState(this, arg1, arg2, arg3);\n        };\n        return PseudoState;\n    })(StateJS.Vertex);\n    StateJS.PseudoState = PseudoState;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * An element within a state machine model that represents an invariant condition within the life of the state machine instance.\n     *\n     * States are one of the fundamental building blocks of the state machine model.\n     * Behaviour can be defined for both state entry and state exit.\n     *\n     * State extends the Vertex class and inherits its public interface.\n     * @class State\n     * @augments Vertex\n     */\n    var State = (function (_super) {\n        __extends(State, _super);\n        /**\n         * Creates a new instance of the State class.\n         * @param {string} name The name of the state.\n         * @param {Element} parent The parent state that owns the state.\n         */\n        function State(name, parent) {\n            _super.call(this, name, parent);\n            // user defined behaviour (via exit method) to execute when exiting a state.\n            this.exitBehavior = new StateJS.Behavior();\n            // user defined behaviour (via entry method) to execute when entering a state.\n            this.entryBehavior = new StateJS.Behavior();\n            /**\n             * The set of regions under this state.\n             * @member {Array<Region>}\n             */\n            this.regions = [];\n        }\n        /**\n         * Returns the default region for the state.\n         * Note, this will create the default region if it does not already exist.\n         * @method defaultRegion\n         * @returns {Region} The default region.\n         */\n        State.prototype.defaultRegion = function () {\n            return this.regions.reduce(function (result, region) { return region.name === StateJS.Region.defaultName ? region : result; }, undefined) || new StateJS.Region(StateJS.Region.defaultName, this);\n        };\n        /**\n         * Tests the state to see if it is a final state;\n         * a final state is one that has no outbound transitions.\n         * @method isFinal\n         * @returns {boolean} True if the state is a final state.\n         */\n        State.prototype.isFinal = function () {\n            return this.outgoing.length === 0;\n        };\n        /**\n         * Tests the state to see if it is a simple state;\n         * a simple state is one that has no child regions.\n         * @method isSimple\n         * @returns {boolean} True if the state is a simple state.\n         */\n        State.prototype.isSimple = function () {\n            return this.regions.length === 0;\n        };\n        /**\n         * Tests the state to see if it is a composite state;\n         * a composite state is one that has one or more child regions.\n         * @method isComposite\n         * @returns {boolean} True if the state is a composite state.\n         */\n        State.prototype.isComposite = function () {\n            return this.regions.length > 0;\n        };\n        /**\n         * Tests the state to see if it is an orthogonal state;\n         * an orthogonal state is one that has two or more child regions.\n         * @method isOrthogonal\n         * @returns {boolean} True if the state is an orthogonal state.\n         */\n        State.prototype.isOrthogonal = function () {\n            return this.regions.length > 1;\n        };\n        /**\n         * Adds behaviour to a state that is executed each time the state is exited.\n         * @method exit\n         * @param {Action} exitAction The action to add to the state's exit behaviour.\n         * @returns {State} Returns the state to allow a fluent style API.\n         */\n        State.prototype.exit = function (exitAction) {\n            this.exitBehavior.push(exitAction);\n            this.getRoot().clean = false;\n            return this;\n        };\n        /**\n         * Adds behaviour to a state that is executed each time the state is entered.\n         * @method entry\n         * @param {Action} entryAction The action to add to the state's entry behaviour.\n         * @returns {State} Returns the state to allow a fluent style API.\n         */\n        State.prototype.entry = function (entryAction) {\n            this.entryBehavior.push(entryAction);\n            this.getRoot().clean = false;\n            return this;\n        };\n        /**\n         * Accepts an instance of a visitor and calls the visitState method on it.\n         * @method accept\n         * @param {Visitor<TArg1>} visitor The visitor instance.\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\n         * @param {any} arg2 An optional argument to pass into the visitor.\n         * @param {any} arg3 An optional argument to pass into the visitor.\n         * @returns {any} Any value can be returned by the visitor.\n         */\n        State.prototype.accept = function (visitor, arg1, arg2, arg3) {\n            return visitor.visitState(this, arg1, arg2, arg3);\n        };\n        return State;\n    })(StateJS.Vertex);\n    StateJS.State = State;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * An element within a state machine model that represents completion of the life of the containing Region within the state machine instance.\n     *\n     * A final state cannot have outbound transitions.\n     *\n     * FinalState extends the State class and inherits its public interface.\n     * @class FinalState\n     * @augments State\n     */\n    var FinalState = (function (_super) {\n        __extends(FinalState, _super);\n        /**\n         * Creates a new instance of the FinalState class.\n         * @param {string} name The name of the final state.\n         * @param {Element} parent The parent element that owns the final state.\n         */\n        function FinalState(name, parent) {\n            _super.call(this, name, parent);\n        }\n        /**\n         * Accepts an instance of a visitor and calls the visitFinalState method on it.\n         * @method accept\n         * @param {Visitor<TArg>} visitor The visitor instance.\n         * @param {TArg} arg An optional argument to pass into the visitor.\n         * @returns {any} Any value can be returned by the visitor.\n         */\n        FinalState.prototype.accept = function (visitor, arg1, arg2, arg3) {\n            return visitor.visitFinalState(this, arg1, arg2, arg3);\n        };\n        return FinalState;\n    })(StateJS.State);\n    StateJS.FinalState = FinalState;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * An element within a state machine model that represents the root of the state machine model.\n     *\n     * StateMachine extends the State class and inherits its public interface.\n     * @class StateMachine\n     * @augments State\n     */\n    var StateMachine = (function (_super) {\n        __extends(StateMachine, _super);\n        /**\n         * Creates a new instance of the StateMachine class.\n         * @param {string} name The name of the state machine.\n         */\n        function StateMachine(name) {\n            _super.call(this, name, undefined);\n            // flag used to indicate that the state machine model has has structural changes and therefore requires initialising.\n            this.clean = false;\n        }\n        /**\n         * Returns the root element within the state machine model.\n         * Note that if this state machine is embeded within another state machine, the ultimate root element will be returned.\n         * @method getRoot\n         * @returns {StateMachine} The root state machine element.\n         */\n        StateMachine.prototype.getRoot = function () {\n            return this.region ? this.region.getRoot() : this;\n        };\n        /**\n         * Accepts an instance of a visitor and calls the visitStateMachine method on it.\n         * @method accept\n         * @param {Visitor<TArg1>} visitor The visitor instance.\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\n         * @param {any} arg2 An optional argument to pass into the visitor.\n         * @param {any} arg3 An optional argument to pass into the visitor.\n         * @returns {any} Any value can be returned by the visitor.\n         */\n        StateMachine.prototype.accept = function (visitor, arg1, arg2, arg3) {\n            return visitor.visitStateMachine(this, arg1, arg2, arg3);\n        };\n        return StateMachine;\n    })(StateJS.State);\n    StateJS.StateMachine = StateMachine;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * A transition between vertices (states or pseudo states) that may be traversed in response to a message.\n     *\n     * Transitions come in a variety of types:\n     * internal transitions respond to messages but do not cause a state transition, they only have behaviour;\n     * local transitions are contained within a single region therefore the source vertex is exited, the transition traversed, and the target state entered;\n     * external transitions are more complex in nature as they cross region boundaries, all elements up to but not not including the common ancestor are exited and entered.\n     *\n     * Entering a composite state will cause the entry of the child regions within the composite state; this in turn may trigger more transitions.\n     * @class Transition\n     */\n    var Transition = (function () {\n        /**\n         * Creates a new instance of the Transition class.\n         * @param {Vertex} source The source of the transition.\n         * @param {Vertex} source The target of the transition; this is an optional parameter, omitting it will create an Internal transition.\n         * @param {TransitionKind} kind The kind the transition; use this to set Local or External (the default if omitted) transition semantics.\n         */\n        function Transition(source, target, kind) {\n            var _this = this;\n            if (kind === void 0) { kind = StateJS.TransitionKind.External; }\n            // user defined behaviour (via effect) executed when traversing this transition.\n            this.transitionBehavior = new StateJS.Behavior();\n            // the collected actions to perform when traversing the transition (includes exiting states, traversal, and state entry)\n            this.onTraverse = new StateJS.Behavior();\n            this.source = source;\n            this.target = target;\n            this.kind = target ? kind : StateJS.TransitionKind.Internal;\n            this.guard = source instanceof StateJS.PseudoState ? Transition.TrueGuard : (function (message) { return message === _this.source; });\n            this.source.outgoing.push(this);\n            this.source.getRoot().clean = false;\n        }\n        /**\n         * Turns a transition into an else transition.\n         *\n         * Else transitions can be used at `Junction` or `Choice` pseudo states if no other transition guards evaluate true, an Else transition if present will be traversed.\n         * @method else\n         * @returns {Transition} Returns the transition object to enable the fluent API.\n         */\n        Transition.prototype.else = function () {\n            this.guard = Transition.FalseGuard;\n            return this;\n        };\n        /**\n         * Defines the guard condition for the transition.\n         * @method when\n         * @param {Guard} guard The guard condition that must evaluate true for the transition to be traversed.\n         * @returns {Transition} Returns the transition object to enable the fluent API.\n         */\n        Transition.prototype.when = function (guard) {\n            this.guard = guard;\n            return this;\n        };\n        /**\n         * Add behaviour to a transition.\n         * @method effect\n         * @param {Action} transitionAction The action to add to the transitions traversal behaviour.\n         * @returns {Transition} Returns the transition object to enable the fluent API.\n         */\n        Transition.prototype.effect = function (transitionAction) {\n            this.transitionBehavior.push(transitionAction);\n            this.source.getRoot().clean = false;\n            return this;\n        };\n        /**\n         * Accepts an instance of a visitor and calls the visitTransition method on it.\n         * @method accept\n         * @param {Visitor<TArg1>} visitor The visitor instance.\n         * @param {TArg1} arg1 An optional argument to pass into the visitor.\n         * @param {any} arg2 An optional argument to pass into the visitor.\n         * @param {any} arg3 An optional argument to pass into the visitor.\n         * @returns {any} Any value can be returned by the visitor.\n         */\n        Transition.prototype.accept = function (visitor, arg1, arg2, arg3) {\n            return visitor.visitTransition(this, arg1, arg2, arg3);\n        };\n        /**\n         * Returns a the transition name.\n         * @method toString\n         * @returns {string}\n         */\n        Transition.prototype.toString = function () {\n            return \"[\" + (this.target ? (this.source + \" -> \" + this.target) : this.source) + \"]\";\n        };\n        // the default guard condition for pseudo states\n        Transition.TrueGuard = function () { return true; };\n        // used as the guard condition for else tranitions\n        Transition.FalseGuard = function () { return false; };\n        return Transition;\n    })();\n    StateJS.Transition = Transition;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * Implementation of a visitor pattern.\n     * @class Visitor\n     */\n    var Visitor = (function () {\n        function Visitor() {\n        }\n        /**\n         * Visits an element within a state machine model.\n         * @method visitElement\n         * @param {Element} element the element being visited.\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\n         * @param {any} arg2 An optional parameter passed into the accept method.\n         * @param {any} arg3 An optional parameter passed into the accept method.\n         * @returns {any} Any value may be returned when visiting an element.\n         */\n        Visitor.prototype.visitElement = function (element, arg1, arg2, arg3) {\n        };\n        /**\n         * Visits a region within a state machine model.\n         * @method visitRegion\n         * @param {Region} region The region being visited.\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\n         * @param {any} arg2 An optional parameter passed into the accept method.\n         * @param {any} arg3 An optional parameter passed into the accept method.\n         * @returns {any} Any value may be returned when visiting an element.\n         */\n        Visitor.prototype.visitRegion = function (region, arg1, arg2, arg3) {\n            var _this = this;\n            var result = this.visitElement(region, arg1, arg2, arg3);\n            region.vertices.forEach(function (vertex) { vertex.accept(_this, arg1, arg2, arg3); });\n            return result;\n        };\n        /**\n         * Visits a vertex within a state machine model.\n         * @method visitVertex\n         * @param {Vertex} vertex The vertex being visited.\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\n         * @param {any} arg2 An optional parameter passed into the accept method.\n         * @param {any} arg3 An optional parameter passed into the accept method.\n         * @returns {any} Any value may be returned when visiting an element.\n         */\n        Visitor.prototype.visitVertex = function (vertex, arg1, arg2, arg3) {\n            var _this = this;\n            var result = this.visitElement(vertex, arg1, arg2, arg3);\n            vertex.outgoing.forEach(function (transition) { transition.accept(_this, arg1, arg2, arg3); });\n            return result;\n        };\n        /**\n         * Visits a pseudo state within a state machine model.\n         * @method visitPseudoState\n         * @param {PseudoState} pseudoState The pseudo state being visited.\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\n         * @param {any} arg2 An optional parameter passed into the accept method.\n         * @param {any} arg3 An optional parameter passed into the accept method.\n         * @returns {any} Any value may be returned when visiting an element.\n         */\n        Visitor.prototype.visitPseudoState = function (pseudoState, arg1, arg2, arg3) {\n            return this.visitVertex(pseudoState, arg1, arg2, arg3);\n        };\n        /**\n         * Visits a state within a state machine model.\n         * @method visitState\n         * @param {State} state The state being visited.\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\n         * @param {any} arg2 An optional parameter passed into the accept method.\n         * @param {any} arg3 An optional parameter passed into the accept method.\n         * @returns {any} Any value may be returned when visiting an element.\n         */\n        Visitor.prototype.visitState = function (state, arg1, arg2, arg3) {\n            var _this = this;\n            var result = this.visitVertex(state, arg1, arg2, arg3);\n            state.regions.forEach(function (region) { region.accept(_this, arg1, arg2, arg3); });\n            return result;\n        };\n        /**\n         * Visits a final state within a state machine model.\n         * @method visitFinal\n         * @param {FinalState} finalState The final state being visited.\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\n         * @param {any} arg2 An optional parameter passed into the accept method.\n         * @param {any} arg3 An optional parameter passed into the accept method.\n         * @returns {any} Any value may be returned when visiting an element.\n         */\n        Visitor.prototype.visitFinalState = function (finalState, arg1, arg2, arg3) {\n            return this.visitState(finalState, arg1, arg2, arg3);\n        };\n        /**\n         * Visits a state machine within a state machine model.\n         * @method visitVertex\n         * @param {StateMachine} state machine The state machine being visited.\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\n         * @param {any} arg2 An optional parameter passed into the accept method.\n         * @param {any} arg3 An optional parameter passed into the accept method.\n         * @returns {any} Any value may be returned when visiting an element.\n         */\n        Visitor.prototype.visitStateMachine = function (stateMachine, arg1, arg2, arg3) {\n            return this.visitState(stateMachine, arg1, arg2, arg3);\n        };\n        /**\n         * Visits a transition within a state machine model.\n         * @method visitTransition\n         * @param {Transition} transition The transition being visited.\n         * @param {TArg1} arg1 An optional parameter passed into the accept method.\n         * @param {any} arg2 An optional parameter passed into the accept method.\n         * @param {any} arg3 An optional parameter passed into the accept method.\n         * @returns {any} Any value may be returned when visiting an element.\n         */\n        Visitor.prototype.visitTransition = function (transition, arg1, arg2, arg3) {\n        };\n        return Visitor;\n    })();\n    StateJS.Visitor = Visitor;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * Default working implementation of a state machine instance class.\n     *\n     * Implements the `IActiveStateConfiguration` interface.\n     * It is possible to create other custom instance classes to manage state machine state in other ways (e.g. as serialisable JSON); just implement the same members and methods as this class.\n     * @class StateMachineInstance\n     * @implements IActiveStateConfiguration\n     */\n    var StateMachineInstance = (function () {\n        /**\n         * Creates a new instance of the state machine instance class.\n         * @param {string} name The optional name of the state machine instance.\n         */\n        function StateMachineInstance(name) {\n            if (name === void 0) { name = \"unnamed\"; }\n            this.last = {};\n            /**\n             * Indicates that the state manchine instance reached was terminated by reaching a Terminate pseudo state.\n             * @member isTerminated\n             */\n            this.isTerminated = false;\n            this.name = name;\n        }\n        // Updates the last known state for a given region.\n        StateMachineInstance.prototype.setCurrent = function (region, state) {\n            this.last[region.qualifiedName] = state;\n        };\n        // Returns the last known state for a given region.\n        StateMachineInstance.prototype.getCurrent = function (region) {\n            return this.last[region.qualifiedName];\n        };\n        /**\n         * Returns the name of the state machine instance.\n         * @method toString\n         * @returns {string} The name of the state machine instance.\n         */\n        StateMachineInstance.prototype.toString = function () {\n            return this.name;\n        };\n        return StateMachineInstance;\n    })();\n    StateJS.StateMachineInstance = StateMachineInstance;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * Sets a method to select an integer random number less than the max value passed as a parameter.\n     *\n     * This is only useful when a custom random number generator is required; the default implementation is fine in most circumstances.\n     * @function setRandom\n     * @param {function} generator A function that takes a max value and returns a random number between 0 and max - 1.\n     * @returns A random number between 0 and max - 1\n     */\n    function setRandom(generator) {\n        random = generator;\n    }\n    StateJS.setRandom = setRandom;\n    /**\n     * Returns the current method used to select an integer random number less than the max value passed as a parameter.\n     *\n     * This is only useful when a custom random number generator is required; the default implementation is fine in most circumstances.\n     * @function getRandom\n     * @returns {function} The function that takes a max value and returns a random number between 0 and max - 1.\n     */\n    function getRandom() {\n        return random;\n    }\n    StateJS.getRandom = getRandom;\n    // the default method used to produce a random number; defaulting to simplified implementation seen in Mozilla Math.random() page; may be overriden for testing\n    var random = function (max) {\n        return Math.floor(Math.random() * max);\n    };\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * Determines if an element is currently active; that it has been entered but not yet exited.\n     * @function isActive\n     * @param {Element} element The state to test.\n     * @param {IActiveStateConfiguration} instance The instance of the state machine model.\n     * @returns {boolean} True if the element is active.\n     */\n    function isActive(element, stateMachineInstance) {\n        if (element instanceof StateJS.Region) {\n            return isActive(element.state, stateMachineInstance);\n        }\n        else if (element instanceof StateJS.State) {\n            return element.region ? (isActive(element.region, stateMachineInstance) && (stateMachineInstance.getCurrent(element.region) === element)) : true;\n        }\n    }\n    StateJS.isActive = isActive;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * Tests an element within a state machine instance to see if its lifecycle is complete.\n     * @function isComplete\n     * @param {Element} element The element to test.\n     * @param {IActiveStateConfiguration} instance The instance of the state machine model to test for completeness.\n     * @returns {boolean} True if the element is complete.\n     */\n    function isComplete(element, instance) {\n        if (element instanceof StateJS.Region) {\n            return instance.getCurrent(element).isFinal();\n        }\n        else if (element instanceof StateJS.State) {\n            return element.regions.every(function (region) { return isComplete(region, instance); });\n        }\n        return true;\n    }\n    StateJS.isComplete = isComplete;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * Initialises a state machine and/or state machine model.\n     *\n     * Passing just the state machine model will initialise the model, passing the model and instance will initialse the instance and if necessary, the model.\n     * @function initialise\n     * @param {StateMachine} stateMachineModel The state machine model. If autoInitialiseModel is true (or no instance is specified) and the model has changed, the model will be initialised.\n     * @param {IActiveStateConfiguration} stateMachineInstance The optional state machine instance to initialise.\n     * @param {boolean} autoInitialiseModel Defaulting to true, this will cause the model to be initialised prior to initialising the instance if the model has changed.\n     */\n    function initialise(stateMachineModel, stateMachineInstance, autoInitialiseModel) {\n        if (autoInitialiseModel === void 0) { autoInitialiseModel = true; }\n        if (stateMachineInstance) {\n            // initialise the state machine model if necessary\n            if (autoInitialiseModel && stateMachineModel.clean === false) {\n                initialise(stateMachineModel);\n            }\n            // log as required\n            StateJS.console.log(\"initialise \" + stateMachineInstance);\n            // enter the state machine instance for the first time\n            stateMachineModel.onInitialise.invoke(undefined, stateMachineInstance);\n        }\n        else {\n            // log as required\n            StateJS.console.log(\"initialise \" + stateMachineModel.name);\n            // initialise the state machine model\n            stateMachineModel.accept(new InitialiseElements(), false);\n            stateMachineModel.clean = true;\n        }\n    }\n    StateJS.initialise = initialise;\n    /**\n     * Passes a message to a state machine for evaluation; messages trigger state transitions.\n     * @function evaluate\n     * @param {StateMachine} stateMachineModel The state machine model. If autoInitialiseModel is true (or no instance is specified) and the model has changed, the model will be initialised.\n     * @param {IActiveStateConfiguration} stateMachineInstance The instance of the state machine model to evaluate the message against.\n     * @param {boolean} autoInitialiseModel Defaulting to true, this will cause the model to be initialised prior to initialising the instance if the model has changed.\n     * @returns {boolean} True if the message triggered a state transition.\n     */\n    function evaluate(stateMachineModel, stateMachineInstance, message, autoInitialiseModel) {\n        if (autoInitialiseModel === void 0) { autoInitialiseModel = true; }\n        // log as required\n        StateJS.console.log(stateMachineInstance + \" evaluate \" + message);\n        // initialise the state machine model if necessary\n        if (autoInitialiseModel && stateMachineModel.clean === false) {\n            initialise(stateMachineModel);\n        }\n        // terminated state machine instances will not evaluate messages\n        if (stateMachineInstance.isTerminated) {\n            return false;\n        }\n        return evaluateState(stateMachineModel, stateMachineInstance, message);\n    }\n    StateJS.evaluate = evaluate;\n    // evaluates messages against a state, executing transitions as appropriate\n    function evaluateState(state, stateMachineInstance, message) {\n        var result = false;\n        // delegate to child regions first\n        state.regions.every(function (region) {\n            if (evaluateState(stateMachineInstance.getCurrent(region), stateMachineInstance, message)) {\n                result = true;\n                return StateJS.isActive(state, stateMachineInstance); // NOTE: this just controls the every loop; also isActive is a litte costly so using sparingly\n            }\n            return true; // NOTE: this just controls the every loop\n        });\n        // if a transition occured in a child region, check for completions\n        if (result) {\n            if ((message !== state) && StateJS.isComplete(state, stateMachineInstance)) {\n                evaluateState(state, stateMachineInstance, state);\n            }\n        }\n        else {\n            // otherwise look for a transition from this state\n            var transitions = state.outgoing.filter(function (transition) { return transition.guard(message, stateMachineInstance); });\n            if (transitions.length === 1) {\n                // execute if a single transition was found\n                result = traverse(transitions[0], stateMachineInstance, message);\n            }\n            else if (transitions.length > 1) {\n                // error if multiple transitions evaluated true\n                StateJS.console.error(state + \": multiple outbound transitions evaluated true for message \" + message);\n            }\n        }\n        return result;\n    }\n    // traverses a transition\n    function traverse(transition, instance, message) {\n        var onTraverse = new StateJS.Behavior(transition.onTraverse), target = transition.target;\n        // process static conditional branches\n        while (target && target instanceof StateJS.PseudoState && target.kind === StateJS.PseudoStateKind.Junction) {\n            target = (transition = selectTransition(target, instance, message)).target;\n            // concatenate behaviour before and after junctions\n            onTraverse.push(transition.onTraverse);\n        }\n        // execute the transition behaviour\n        onTraverse.invoke(message, instance);\n        // process dynamic conditional branches\n        if (target && (target instanceof StateJS.PseudoState) && (target.kind === StateJS.PseudoStateKind.Choice)) {\n            traverse(selectTransition(target, instance, message), instance, message);\n        }\n        else if (target && target instanceof StateJS.State && StateJS.isComplete(target, instance)) {\n            // test for completion transitions\n            evaluateState(target, instance, target);\n        }\n        return true;\n    }\n    // select next leg of composite transitions after choice and junction pseudo states\n    function selectTransition(pseudoState, stateMachineInstance, message) {\n        var results = pseudoState.outgoing.filter(function (transition) { return transition.guard(message, stateMachineInstance); });\n        if (pseudoState.kind === StateJS.PseudoStateKind.Choice) {\n            return results.length !== 0 ? results[StateJS.getRandom()(results.length)] : findElse(pseudoState);\n        }\n        else {\n            if (results.length > 1) {\n                StateJS.console.error(\"Multiple outbound transition guards returned true at \" + this + \" for \" + message);\n            }\n            else {\n                return results[0] || findElse(pseudoState);\n            }\n        }\n    }\n    // look for else transitins from a junction or choice\n    function findElse(pseudoState) {\n        return pseudoState.outgoing.filter(function (transition) { return transition.guard === StateJS.Transition.FalseGuard; })[0];\n    }\n    // functions to retreive specif element behavior\n    function leave(elementBehavior) { return elementBehavior[0] || (elementBehavior[0] = new StateJS.Behavior()); }\n    function beginEnter(elementBehavior) { return elementBehavior[1] || (elementBehavior[1] = new StateJS.Behavior()); }\n    function endEnter(elementBehavior) { return elementBehavior[2] || (elementBehavior[2] = new StateJS.Behavior()); }\n    function enter(elementBehavior) { return new StateJS.Behavior(beginEnter(elementBehavior)).push(endEnter(elementBehavior)); }\n    // get all the vertex ancestors of a vertex (including the vertex itself)\n    function ancestors(vertex) {\n        return (vertex.region ? ancestors(vertex.region.state) : []).concat(vertex);\n    }\n    // determine the type of transition and use the appropriate initiliasition method\n    var InitialiseTransitions = (function (_super) {\n        __extends(InitialiseTransitions, _super);\n        function InitialiseTransitions() {\n            _super.apply(this, arguments);\n        }\n        InitialiseTransitions.prototype.visitTransition = function (transition, behaviour) {\n            if (transition.kind === StateJS.TransitionKind.Internal) {\n                transition.onTraverse.push(transition.transitionBehavior);\n            }\n            else if (transition.kind === StateJS.TransitionKind.Local) {\n                this.visitLocalTransition(transition, behaviour);\n            }\n            else {\n                this.visitExternalTransition(transition, behaviour);\n            }\n        };\n        // initialise internal transitions: these do not leave the source state\n        InitialiseTransitions.prototype.visitLocalTransition = function (transition, behaviour) {\n            var _this = this;\n            transition.onTraverse.push(function (message, instance) {\n                var targetAncestors = ancestors(transition.target), i = 0;\n                // find the first inactive element in the target ancestry\n                while (StateJS.isActive(targetAncestors[i], instance)) {\n                    ++i;\n                }\n                // exit the active sibling\n                leave(behaviour(instance.getCurrent(targetAncestors[i].region))).invoke(message, instance);\n                // perform the transition action;\n                transition.transitionBehavior.invoke(message, instance);\n                // enter the target ancestry\n                while (i < targetAncestors.length) {\n                    _this.cascadeElementEntry(transition, behaviour, targetAncestors[i++], targetAncestors[i], function (behavior) { behavior.invoke(message, instance); });\n                }\n                // trigger cascade\n                endEnter(behaviour(transition.target)).invoke(message, instance);\n            });\n        };\n        // initialise external transitions: these are abritarily complex\n        InitialiseTransitions.prototype.visitExternalTransition = function (transition, behaviour) {\n            var sourceAncestors = ancestors(transition.source), targetAncestors = ancestors(transition.target), i = Math.min(sourceAncestors.length, targetAncestors.length) - 1;\n            // find the index of the first uncommon ancestor (or for external transitions, the source)\n            while (sourceAncestors[i - 1] !== targetAncestors[i - 1]) {\n                --i;\n            }\n            // leave source ancestry as required\n            transition.onTraverse.push(leave(behaviour(sourceAncestors[i])));\n            // perform the transition effect\n            transition.onTraverse.push(transition.transitionBehavior);\n            // enter the target ancestry\n            while (i < targetAncestors.length) {\n                this.cascadeElementEntry(transition, behaviour, targetAncestors[i++], targetAncestors[i], function (behavior) { return transition.onTraverse.push(behavior); });\n            }\n            // trigger cascade\n            transition.onTraverse.push(endEnter(behaviour(transition.target)));\n        };\n        InitialiseTransitions.prototype.cascadeElementEntry = function (transition, behaviour, element, next, task) {\n            task(beginEnter(behaviour(element)));\n            if (next && element instanceof StateJS.State) {\n                element.regions.forEach(function (region) {\n                    task(beginEnter(behaviour(region)));\n                    if (region !== next.region) {\n                        task(endEnter(behaviour(region)));\n                    }\n                });\n            }\n        };\n        return InitialiseTransitions;\n    })(StateJS.Visitor);\n    // bootstraps all the elements within a state machine model\n    var InitialiseElements = (function (_super) {\n        __extends(InitialiseElements, _super);\n        function InitialiseElements() {\n            _super.apply(this, arguments);\n            this.behaviours = {};\n        }\n        InitialiseElements.prototype.behaviour = function (element) {\n            return this.behaviours[element.qualifiedName] || (this.behaviours[element.qualifiedName] = []);\n        };\n        InitialiseElements.prototype.visitElement = function (element, deepHistoryAbove) {\n            if (StateJS.console !== defaultConsole) {\n                leave(this.behaviour(element)).push(function (message, instance) { return StateJS.console.log(instance + \" leave \" + element); });\n                beginEnter(this.behaviour(element)).push(function (message, instance) { return StateJS.console.log(instance + \" enter \" + element); });\n            }\n        };\n        InitialiseElements.prototype.visitRegion = function (region, deepHistoryAbove) {\n            var _this = this;\n            var regionInitial = region.vertices.reduce(function (result, vertex) { return vertex instanceof StateJS.PseudoState && vertex.isInitial() ? vertex : result; }, undefined);\n            region.vertices.forEach(function (vertex) { vertex.accept(_this, deepHistoryAbove || (regionInitial && regionInitial.kind === StateJS.PseudoStateKind.DeepHistory)); });\n            // leave the curent active child state when exiting the region\n            leave(this.behaviour(region)).push(function (message, stateMachineInstance) { return leave(_this.behaviour(stateMachineInstance.getCurrent(region))).invoke(message, stateMachineInstance); });\n            // enter the appropriate child vertex when entering the region\n            if (deepHistoryAbove || !regionInitial || regionInitial.isHistory()) {\n                endEnter(this.behaviour(region)).push(function (message, stateMachineInstance, history) {\n                    enter(_this.behaviour((history || regionInitial.isHistory()) ? stateMachineInstance.getCurrent(region) || regionInitial : regionInitial)).invoke(message, stateMachineInstance, history || regionInitial.kind === StateJS.PseudoStateKind.DeepHistory);\n                });\n            }\n            else {\n                endEnter(this.behaviour(region)).push(enter(this.behaviour(regionInitial)));\n            }\n            this.visitElement(region, deepHistoryAbove);\n        };\n        InitialiseElements.prototype.visitPseudoState = function (pseudoState, deepHistoryAbove) {\n            _super.prototype.visitPseudoState.call(this, pseudoState, deepHistoryAbove);\n            // evaluate comppletion transitions once vertex entry is complete\n            if (pseudoState.isInitial()) {\n                endEnter(this.behaviour(pseudoState)).push(function (message, stateMachineInstance) { return traverse(pseudoState.outgoing[0], stateMachineInstance); });\n            }\n            else if (pseudoState.kind === StateJS.PseudoStateKind.Terminate) {\n                // terminate the state machine instance upon transition to a terminate pseudo state\n                beginEnter(this.behaviour(pseudoState)).push(function (message, stateMachineInstance) { return stateMachineInstance.isTerminated = true; });\n            }\n        };\n        InitialiseElements.prototype.visitState = function (state, deepHistoryAbove) {\n            var _this = this;\n            // NOTE: manually iterate over the child regions to control the sequence of behaviour\n            state.regions.forEach(function (region) {\n                region.accept(_this, deepHistoryAbove);\n                leave(_this.behaviour(state)).push(leave(_this.behaviour(region)));\n                endEnter(_this.behaviour(state)).push(enter(_this.behaviour(region)));\n            });\n            this.visitVertex(state, deepHistoryAbove);\n            // add the user defined behaviour when entering and exiting states\n            leave(this.behaviour(state)).push(state.exitBehavior);\n            beginEnter(this.behaviour(state)).push(state.entryBehavior);\n            // update the parent regions current state\n            beginEnter(this.behaviour(state)).push(function (message, stateMachineInstance) {\n                if (state.region) {\n                    stateMachineInstance.setCurrent(state.region, state);\n                }\n            });\n        };\n        InitialiseElements.prototype.visitStateMachine = function (stateMachine, deepHistoryAbove) {\n            var _this = this;\n            _super.prototype.visitStateMachine.call(this, stateMachine, deepHistoryAbove);\n            // initiaise all the transitions once all the elements have been initialised\n            stateMachine.accept(new InitialiseTransitions(), function (element) { return _this.behaviour(element); });\n            // define the behaviour for initialising a state machine instance\n            stateMachine.onInitialise = enter(this.behaviour(stateMachine));\n        };\n        return InitialiseElements;\n    })(StateJS.Visitor);\n    var defaultConsole = {\n        log: function (message) {\n            var optionalParams = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                optionalParams[_i - 1] = arguments[_i];\n            }\n        },\n        warn: function (message) {\n            var optionalParams = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                optionalParams[_i - 1] = arguments[_i];\n            }\n        },\n        error: function (message) {\n            var optionalParams = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                optionalParams[_i - 1] = arguments[_i];\n            }\n            throw message;\n        }\n    };\n    /**\n     * The object used for log, warning and error messages\n     * @member {IConsole}\n     */\n    StateJS.console = defaultConsole;\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\nvar StateJS;\n(function (StateJS) {\n    /**\n     * Validates a state machine model for correctness (see the constraints defined within the UML Superstructure specification).\n     * @function validate\n     * @param {StateMachine} stateMachineModel The state machine model to validate.\n     */\n    function validate(stateMachineModel) {\n        stateMachineModel.accept(new Validator());\n    }\n    StateJS.validate = validate;\n    function ancestors(vertex) {\n        return (vertex.region ? ancestors(vertex.region.state) : []).concat(vertex);\n    }\n    var Validator = (function (_super) {\n        __extends(Validator, _super);\n        function Validator() {\n            _super.apply(this, arguments);\n        }\n        Validator.prototype.visitPseudoState = function (pseudoState) {\n            _super.prototype.visitPseudoState.call(this, pseudoState);\n            if (pseudoState.kind === StateJS.PseudoStateKind.Choice || pseudoState.kind === StateJS.PseudoStateKind.Junction) {\n                // [7] In a complete statemachine, a junction vertex must have at least one incoming and one outgoing transition.\n                // [8] In a complete statemachine, a choice vertex must have at least one incoming and one outgoing transition.\n                if (pseudoState.outgoing.length === 0) {\n                    StateJS.console.error(pseudoState + \": \" + pseudoState.kind + \" pseudo states must have at least one outgoing transition.\");\n                }\n                // choice and junction pseudo state can have at most one else transition\n                if (pseudoState.outgoing.filter(function (transition) { return transition.guard === StateJS.Transition.FalseGuard; }).length > 1) {\n                    StateJS.console.error(pseudoState + \": \" + pseudoState.kind + \" pseudo states cannot have more than one Else transitions.\");\n                }\n            }\n            else {\n                // non choice/junction pseudo state may not have else transitions\n                if (pseudoState.outgoing.filter(function (transition) { return transition.guard === StateJS.Transition.FalseGuard; }).length !== 0) {\n                    StateJS.console.error(pseudoState + \": \" + pseudoState.kind + \" pseudo states cannot have Else transitions.\");\n                }\n                if (pseudoState.isInitial()) {\n                    if (pseudoState.outgoing.length !== 1) {\n                        // [1] An initial vertex can have at most one outgoing transition.\n                        // [2] History vertices can have at most one outgoing transition.\n                        StateJS.console.error(pseudoState + \": initial pseudo states must have one outgoing transition.\");\n                    }\n                    else {\n                        // [9] The outgoing transition from an initial vertex may have a behavior, but not a trigger or guard.\n                        if (pseudoState.outgoing[0].guard !== StateJS.Transition.TrueGuard) {\n                            StateJS.console.error(pseudoState + \": initial pseudo states cannot have a guard condition.\");\n                        }\n                    }\n                }\n            }\n        };\n        Validator.prototype.visitRegion = function (region) {\n            _super.prototype.visitRegion.call(this, region);\n            // [1] A region can have at most one initial vertex.\n            // [2] A region can have at most one deep history vertex.\n            // [3] A region can have at most one shallow history vertex.\n            var initial;\n            region.vertices.forEach(function (vertex) {\n                if (vertex instanceof StateJS.PseudoState && vertex.isInitial()) {\n                    if (initial) {\n                        StateJS.console.error(region + \": regions may have at most one initial pseudo state.\");\n                    }\n                    initial = vertex;\n                }\n            });\n        };\n        Validator.prototype.visitState = function (state) {\n            _super.prototype.visitState.call(this, state);\n            if (state.regions.filter(function (state) { return state.name === StateJS.Region.defaultName; }).length > 1) {\n                StateJS.console.error(state + \": a state cannot have more than one region named \" + StateJS.Region.defaultName);\n            }\n        };\n        Validator.prototype.visitFinalState = function (finalState) {\n            _super.prototype.visitFinalState.call(this, finalState);\n            // [1] A final state cannot have any outgoing transitions.\n            if (finalState.outgoing.length !== 0) {\n                StateJS.console.error(finalState + \": final states must not have outgoing transitions.\");\n            }\n            // [2] A final state cannot have regions.\n            if (finalState.regions.length !== 0) {\n                StateJS.console.error(finalState + \": final states must not have child regions.\");\n            }\n            // [4] A final state has no entry behavior.\n            if (finalState.entryBehavior.hasActions()) {\n                StateJS.console.warn(finalState + \": final states may not have entry behavior.\");\n            }\n            // [5] A final state has no exit behavior.\n            if (finalState.exitBehavior.hasActions()) {\n                StateJS.console.warn(finalState + \": final states may not have exit behavior.\");\n            }\n        };\n        Validator.prototype.visitTransition = function (transition) {\n            _super.prototype.visitTransition.call(this, transition);\n            // Local transition target vertices must be a child of the source vertex\n            if (transition.kind === StateJS.TransitionKind.Local) {\n                if (ancestors(transition.target).indexOf(transition.source) === -1) {\n                    StateJS.console.error(transition + \": local transition target vertices must be a child of the source composite sate.\");\n                }\n            }\n        };\n        return Validator;\n    })(StateJS.Visitor);\n})(StateJS || (StateJS = {}));\n/*\n * Finite state machine library\n * Copyright (c) 2014-5 Steelbreeze Limited\n * Licensed under the MIT and GPL v3 licences\n * http://www.steelbreeze.net/state.cs\n */\n//var module = module;\nmodule.exports = StateJS;\n"]}