{"version":3,"sources":["../../../../assets/scripts/assets/scripts/PipeGroup.js"],"names":["cc","Class","extends","Component","properties","speed","botYRange","p","spacingRange","topPipe","Node","botPipe","onEnable","botYPos","x","Math","random","y","space","topYPos","update","dt","D","game","state","GameManager","State","Run","node","disappear","getBoundingBoxToWorld","xMax","pipeManager","despawnPipe"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;AAELC,gBAAY;AACRC,eAAO,CADC;AAERC,mBAAWN,GAAGO,CAAH,CAAK,CAAL,EAAQ,CAAR,CAFH;AAGRC,sBAAcR,GAAGO,CAAH,CAAK,CAAL,EAAQ,CAAR,CAHN;AAIRE,iBAAST,GAAGU,IAJJ;AAKRC,iBAASX,GAAGU;AALJ,KAFP;AASLE,YATK,sBASO;AACR,YAAIC,UAAU,KAAKP,SAAL,CAAeQ,CAAf,GAAmBC,KAAKC,MAAL,MAAiB,KAAKV,SAAL,CAAeW,CAAf,GAAmB,KAAKX,SAAL,CAAeQ,CAAnD,CAAjC;AACA,YAAII,QAAQ,KAAKV,YAAL,CAAkBM,CAAlB,GAAsBC,KAAKC,MAAL,MAAiB,KAAKR,YAAL,CAAkBS,CAAlB,GAAsB,KAAKT,YAAL,CAAkBM,CAAzD,CAAlC;AACA,YAAIK,UAAUN,UAAUK,KAAxB;AACA,aAAKT,OAAL,CAAaQ,CAAb,GAAiBE,OAAjB;AACA,aAAKR,OAAL,CAAaM,CAAb,GAAiBJ,OAAjB;AACH,KAfI;AAgBLO,UAhBK,kBAgBGC,EAhBH,EAgBO;AACR,YAAIC,EAAEC,IAAF,CAAOC,KAAP,KAAiBF,EAAEG,WAAF,CAAcC,KAAd,CAAoBC,GAAzC,EAA8C;AAC1C;AACH;;AAED,aAAKC,IAAL,CAAUd,CAAV,IAAe,KAAKT,KAAL,GAAagB,EAA5B;;AAEA,YAAIQ,YAAY,KAAKD,IAAL,CAAUE,qBAAV,GAAkCC,IAAlC,GAAyC,CAAzD;AACA,YAAIF,SAAJ,EAAe;AACXP,cAAEU,WAAF,CAAcC,WAAd,CAA0B,IAA1B;AACH;AACJ;AA3BI,CAAT","file":"PipeGroup.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n    properties: {\n        speed: 0,\n        botYRange: cc.p(0, 0),\n        spacingRange: cc.p(0, 0),\n        topPipe: cc.Node,\n        botPipe: cc.Node\n    },\n    onEnable () {\n        let botYPos = this.botYRange.x + Math.random() * (this.botYRange.y - this.botYRange.x);\n        let space = this.spacingRange.x + Math.random() * (this.spacingRange.y - this.spacingRange.x);\n        let topYPos = botYPos + space;\n        this.topPipe.y = topYPos;\n        this.botPipe.y = botYPos;\n    },\n    update (dt) {\n        if (D.game.state !== D.GameManager.State.Run) {\n            return;\n        }\n\n        this.node.x += this.speed * dt;\n\n        var disappear = this.node.getBoundingBoxToWorld().xMax < 0;\n        if (disappear) {\n            D.pipeManager.despawnPipe(this);\n        }\n    }\n});\n"]}