{"version":3,"sources":["ActorRenderer.js"],"names":["Game","require","Types","Utils","ActorPlayingState","cc","Class","extends","Component","properties","playerInfo","Node","stakeOnTable","cardInfo","cardPrefab","Prefab","anchorCards","spPlayerName","Sprite","labelPlayerName","Label","labelTotalStake","spPlayerPhoto","callCounter","ProgressBar","labelStakeOnTable","spChips","default","type","labelCardInfo","spCardInfo","animFX","cardSpace","onLoad","init","playerInfoPos","stakePos","turnDuration","switchSide","actor","getComponent","isCounting","counterTimer","position","string","name","updateTotalStake","gold","photoIdx","spriteFrame","instance","assetMng","playerPhotos","show","active","update","dt","progress","initDealer","num","startCountdown","resetCountdown","playBlackJackFX","playFX","playBustFX","onDeal","card","newCard","instantiate","addChild","node","reveal","startPos","p","index","cards","length","endPos","setPosition","_updatePointPos","x","moveAction","moveTo","callback","callFunc","_onDealEnd","runAction","sequence","target","state","Normal","updatePoint","onReset","removeAllChildren","_resetChips","onRevealHoldCard","find","updateState","bestPoint","hand","Hand","BlackJack","FiveCard","xPos","showStakeChips","stake","chips","count","i","enabled","texCardInfo","Bust","min","getMinMaxPoint","texBust","Stand","max"],"mappings":"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","file":"ActorRenderer.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["var Game = require('Game');\nvar Types = require('Types');\nvar Utils = require('Utils');\nvar ActorPlayingState = Types.ActorPlayingState;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        playerInfo: cc.Node,\n        stakeOnTable: cc.Node,\n        cardInfo: cc.Node,\n        cardPrefab: cc.Prefab,\n        anchorCards: cc.Node,\n        spPlayerName: cc.Sprite,\n        labelPlayerName: cc.Label,\n        labelTotalStake: cc.Label,\n        spPlayerPhoto: cc.Sprite,\n        callCounter: cc.ProgressBar,\n        labelStakeOnTable: cc.Label,\n        spChips: {\n            default: [],\n            type: cc.Sprite\n        },\n        labelCardInfo: cc.Label,\n        spCardInfo: cc.Sprite,\n        animFX: cc.Node,\n        cardSpace: 0\n    },\n\n    onLoad: function () {\n    },\n\n    init: function ( playerInfo, playerInfoPos, stakePos, turnDuration, switchSide ) {\n        // actor\n        this.actor = this.getComponent('Actor');\n\n        // nodes\n        this.isCounting = false;\n        this.counterTimer = 0;\n        this.turnDuration = turnDuration;\n\n        this.playerInfo.position = playerInfoPos;\n        this.stakeOnTable.position = stakePos;\n        this.labelPlayerName.string = playerInfo.name;\n        this.updateTotalStake(playerInfo.gold);\n        var photoIdx = playerInfo.photoIdx % 5;\n        this.spPlayerPhoto.spriteFrame = Game.instance.assetMng.playerPhotos[photoIdx];\n        // fx\n        this.animFX = this.animFX.getComponent('FXPlayer');\n        this.animFX.init();\n        this.animFX.show(false);\n\n        this.cardInfo.active = false;\n\n        // switch side\n        if (switchSide) {\n            this.spCardInfo.getComponent('SideSwitcher').switchSide();\n            this.spPlayerName.getComponent('SideSwitcher').switchSide();\n        }\n    },\n\n    update: function (dt) {\n        if (this.isCounting) {\n            this.callCounter.progress = this.counterTimer/this.turnDuration;\n            this.counterTimer += dt;\n            if (this.counterTimer >= this.turnDuration) {\n                this.isCounting = false;\n                this.callCounter.progress = 1;\n            }\n        }\n    },\n\n    initDealer: function () {\n        // actor\n        this.actor = this.getComponent('Actor');\n        // fx\n        this.animFX = this.animFX.getComponent('FXPlayer');\n        this.animFX.init();\n        this.animFX.show(false);\n    },\n\n    updateTotalStake: function (num) {\n        this.labelTotalStake.string = '$' + num;\n    },\n\n    startCountdown: function() {\n        if (this.callCounter) {\n            this.isCounting = true;\n            this.counterTimer = 0;\n        }\n    },\n\n    resetCountdown: function() {\n        if (this.callCounter) {\n            this.isCounting = false;\n            this.counterTimer = 0;\n            this.callCounter.progress = 0;\n        }\n    },\n\n    playBlackJackFX: function () {\n        this.animFX.playFX('blackjack');\n    },\n\n    playBustFX: function () {\n        this.animFX.playFX('bust');\n    },\n\n    onDeal: function (card, show) {\n        var newCard = cc.instantiate(this.cardPrefab).getComponent('Card');\n        this.anchorCards.addChild(newCard.node);\n        newCard.init(card);\n        newCard.reveal(show);\n\n        var startPos = cc.p(0, 0);\n        var index = this.actor.cards.length - 1;\n        var endPos = cc.p(this.cardSpace * index, 0);\n        newCard.node.setPosition(startPos);\n        this._updatePointPos(endPos.x);\n\n        var moveAction = cc.moveTo(0.5, endPos);\n        var callback = cc.callFunc(this._onDealEnd, this);\n        newCard.node.runAction(cc.sequence(moveAction, callback));\n    },\n\n    _onDealEnd: function(target) {\n        this.resetCountdown();\n        if(this.actor.state === ActorPlayingState.Normal) {\n            this.startCountdown();\n        }\n        this.updatePoint();\n        // this._updatePointPos(pointX);\n    },\n\n    onReset: function () {\n        this.cardInfo.active = false;\n\n        this.anchorCards.removeAllChildren();\n\n        this._resetChips();\n    },\n\n    onRevealHoldCard: function () {\n        var card = cc.find('cardPrefab', this.anchorCards).getComponent('Card');\n        card.reveal(true);\n        this.updateState();\n    },\n\n    updatePoint: function () {\n        this.cardInfo.active = true;\n        this.labelCardInfo.string = this.actor.bestPoint;\n\n        switch (this.actor.hand) {\n            case Types.Hand.BlackJack:\n                this.animFX.show(true);\n                this.animFX.playFX('blackjack');\n                break;\n            case Types.Hand.FiveCard:\n                // TODO\n                break;\n        }\n    },\n\n    _updatePointPos: function (xPos) {\n        // cc.log(this.name + ' card info pos: ' + xPos);\n        this.cardInfo.setPosition(xPos + 50, 0);\n    },\n\n    showStakeChips: function(stake) {\n        var chips = this.spChips;\n        var count = 0;\n        if (stake > 50000) {\n            count = 5;\n        } else if (stake > 25000) {\n            count = 4;\n        } else if (stake > 10000) {\n            count = 3;\n        } else if (stake > 5000) {\n            count = 2;\n        } else if (stake > 0) {\n            count = 1;\n        }\n        for (var i = 0; i < count; ++i) {\n            chips[i].enabled = true;\n        }\n    },\n\n    _resetChips: function () {\n        for (var i = 0; i < this.spChips.length; ++i) {\n            this.spChips.enabled = false;\n        }\n    },\n\n    updateState: function () {\n        switch (this.actor.state) {\n            case ActorPlayingState.Normal:\n                this.cardInfo.active = true;\n                this.spCardInfo.spriteFrame = Game.instance.assetMng.texCardInfo;\n                this.updatePoint();\n                break;\n            case ActorPlayingState.Bust:\n                var min = Utils.getMinMaxPoint(this.actor.cards).min;\n                this.labelCardInfo.string = '爆牌(' + min + ')';\n                this.spCardInfo.spriteFrame = Game.instance.assetMng.texBust;\n                this.cardInfo.active = true;\n                this.animFX.show(true);\n                this.animFX.playFX('bust');\n                this.resetCountdown();\n                break;\n            case ActorPlayingState.Stand:\n                var max = Utils.getMinMaxPoint(this.actor.cards).max;\n                this.labelCardInfo.string = '停牌(' + max + ')';\n                this.spCardInfo.spriteFrame = Game.instance.assetMng.texCardInfo;\n                this.resetCountdown();\n                // this.updatePoint();\n                break;\n        }\n    },\n});\n"]}